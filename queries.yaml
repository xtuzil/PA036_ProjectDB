 queries:

  # mongo options:
  #  collection:
  #    person
  #    speed_violation
  #  method
  #  filter
  #  value
  #  projection
  #  arrayFilters

#1- select s jednoduchou podmienkou na toplevel atribute s agregaciou count
  - id: 1
    description: "Count people with age more than 40"
    fetch: true
    postgres: SELECT COUNT(*) FROM person WHERE (data->>'age')::int > 40;
    mongo:
      collection: person
      method: count
      filter: '{ "age" : { "$gt" : 40 } }'

#2- select s jednoduchou podmienkou na toplevel atribute
  - id: 2
    description: "Select people with age more than 40"
    fetch: true
    postgres: SELECT * FROM person WHERE (data->>'age')::int > 40;
    mongo:
      collection: person
      method: find
      filter: '{ "age" : { "$gt" : 40 } }'

#3- select s jednoduchou podmienkou na toplevel atribute s pouzitim containment funkcie
  - id: 3
    description: "Select people with age 40 (with containment function)"
    fetch: true
    postgres: 'SELECT * from person where (data @> ''{"age": 40}'')::boolean = true;'
    mongo:
      collection: person
      method: find
    filter: '{ "age" : 40 }'
    
#4- select s jednoduchou podmienkou na toplevel array atribute
  - id: 4
    description: "Select people with contact like '539-206' (top level atribut contacts)"
    fetch: true
    postgres: select * from person where (data->>'contacts') like '%539-206%';
    mongo:
      collection: person
      method: find
      filter: '{ "contacts" : {"$regex": "539-206" } }'

#5- select s jednoduchou podmienkou na toplevel array atribute s pouzitim existence funkcie
  - id: 5
    description: "Select people with contact '+1 (966) 429-3818' (top level atribut contacts)"
    fetch: true
    postgres: select * from person where (data->'contacts')::jsonb ? '+1 (966) 429-3818';
    mongo:
      collection: person
      method: find
      filter: '{ "contacts" : "+1 (966) 429-3818" }'

#6- Zanoreny select v poli cars
  - id: 6
    description: "Select all license plates of all cars"
    fetch: true
    postgres: select jsonb_array_elements(data -> 'cars') -> 'license_plate' from person;
    mongo:
      collection: person
      method: distinct
      distinct: 'cars.license_plate'

 #7- Viac zanoreny select v poli cars cez pole tech_exams k polu defects
  - id: 7
    description: "Select all defects from all tech exams (vsetky defekty na vsetkych technickych prehliadkach vsetkych aut - pocitaj s velkou duplicitou)"
    fetch: true
    postgres: select jsonb_array_elements(jsonb_array_elements(jsonb_array_elements(data -> 'cars') -> 'tech_exams') -> 'defects') from person;
    mongo:
      collection: person
      method: aggregate
      filter: '[{"$unwind":"$cars"},{"$unwind":"$cars.tech_exams"},{"$unwind":"$cars.tech_exams.defects"},{"$project":{"d":"$cars.tech_exams.defects","_id":0}}]'
      #filter: '[{"$addFields":{"defects":{"$reduce":{"input":"$cars.tech_exams","initialValue":[],"in":{"$concatArrays":["$$value",{"$map":{"input":"$$this.defects","as":"dfcts","in":{"dfct":"$$dfcts"}}}]}}}}},{"$unwind":"$defects"},{"$project":{"d":"$defects.dfct", "_id":0}},{"$unwind" :"$d"}]'

#8- Zlozity select z person s joinom na speed_violation
  - id: 8
    description: "Select name of person, age of person, license plate of person with record, date of speed violation, speed limit and actual speed of every speed violation record with actual speed higher than 100 (should be 80877 rows)"
    fetch: true
    postgres: 'select t.name, t.age, t.license_plate, (speed_violation.data->>''date'') as date, (speed_violation.data->>''speed_limit'') as speed_limit, (speed_violation.data->>''actual_speed'') as actual_speed from (select person.data ->> ''name'' as name, person.data ->> ''age'' as age, jsonb_array_elements(person.data -> ''cars'') -> ''license_plate'' as license_plate from person) as t inner join speed_violation on license_plate = speed_violation.data -> ''license_plate'' where (speed_violation.data -> ''actual_speed'')::int > 199;'
    #TODO: mongo mega pomaly
    #mongo:
      #descriptionMongo: "Select names of all people who drove with speed 200"
      #collection: speed_violation
      #method: aggregate
      #filter: '[{ "$match": { "actual_speed": { "$gt": 199}}}, {"$lookup":{"from": "person", "localField": "license_plate", "foreignField": "cars.license_plate", "as": "join"}}, {"$project":{"name":"$join.name"}} ]'


   #9- jednoduchy select na toplevel atribute s agregaciou average
  - id: 9
    description: "Select average age of all people"
    fetch: true
    postgres: 'SELECT AVG((data->''age'')::int) FROM person;'
    mongo: 
      collection: person
      method: aggregate
      filter: '[{"$group":{"_id": null,"avg": { "$avg": "$age" }}}]'

#10- jednoduchy select na toplevel atribute s agregaciou maximum
  - id: 10
    description: "Select maximum age from all people"
    fetch: true
    postgres: 'SELECT MAX((data->''age'')::int) FROM person;'
    mongo: 
      collection: person
      method: aggregate
      filter: '[{"$group":{"_id": null,"max": { "$max": "$age" }}}]'

#11- jednoduchy select na toplevel atribute s agregaciou minimum
  - id: 11
    description: "Select minimum age from all people"
    fetch: true
    postgres: 'SELECT MIN((data->''age'')::int) FROM person;'
    mongo: 
      collection: person
      method: aggregate
      filter: '[{"$group":{"_id": null,"min": { "$min": "$age" }}}]'

#12- jednoduchy select na toplevel atribute s agregaciou sum
  - id: 12
    description: "Select sum of age of all people (should be 2943583)"
    fetch: true
    postgres: 'SELECT SUM((data->''age'')::int) FROM person;'
    mongo: 
      collection: person
      method: aggregate
      filter: '[{"$group":{"_id": null,"sum": { "$sum": "$age" }}}]'

#13- podmieneny select s agregaciou array_agg
  - id: 13
    description: "Put names of all people with age 18 concatenated into an array with ARRAY_AGG"
    fetch: true
    postgres: 'SELECT ARRAY_AGG(data->''name'') from person where (data->''age'')::int = 18;'
    mongo:
      collection: person
      method: aggregate
      filter: '[{ "$match": { "age": { "$eq": 18}}},{"$group": { "_id": "_id", "namesArr": { "$push": "$name" }}}]'

#14- cisty count bez podmienok
  - id: 14
    description: "Count all from person table"
    fetch: true
    postgres: 'SELECT COUNT(*) FROM person;'
    mongo:
      collection: person
      method: count
      filter: '{ }'

#15- count na query #3
  - id: 15
    description: "Select count of people with age 40 (with containment function)"
    fetch: true
    postgres: 'SELECT COUNT(*) from person where (data @> ''{"age": 40}'')::boolean = true;'
    mongo:
      collection: person
      method: count
      filter: '{ "age": 40 }'

#16- count na query #4
  - id: 16
    description: "Select count of people with contact like '539-206' (top level atribut contacts)"
    fetch: true
    postgres: 'select count(*) from person where (data->>''contacts'') like ''%539-206%'';'
    mongo:
      collection: person
      method: find
      filter: '{ "contacts" : {"$regex": "539-206"} }'

#17- count na query #5
  - id: 17
    description: "Select count of people with contact '+1 (966) 429-3818' (top level atribut contacts)"
    fetch: true
    postgres: 'select count(*) from person where (data->''contacts'')::jsonb ? ''+1 (966) 429-3818'';'
    mongo:
      collection: person
      method: find
      filter: '{ "contacts" : "+1 (966) 429-3818" }'

#18- count na query #6
  - id: 18
    description: "Select count of all license plates of all cars"
    fetch: true
    postgres: 'select count(*) from (select jsonb_array_elements(data -> ''cars'') -> ''license_plate'' from person) as t;'
    mongo:
      collection: person
      method: aggregate
      filter: '[ {"$project": {"_id":0,"arraySize":{"$size":"$cars"}}},{"$group": {"_id":null,"totalArraysSize":{"$sum":"$arraySize"}}}]'


   #19- count na query #7
  - id: 19
    description: "Select count of all defects from all tech exams (vsetky defekty na vsetkych technickych prehliadkach vsetkych aut - pocitaj s velkou duplicitou)"
    fetch: true
    postgres: 'select count(*) from (select jsonb_array_elements(jsonb_array_elements(jsonb_array_elements(data -> ''cars'') -> ''tech_exams'') -> ''defects'') from person) as t;'
    # mongo: TODO

#20- count na query #8
  - id: 20
    description: "Select count of name of person, age of person, license plate of person with record, date of speed violation, speed limit and actual speed of every speed violation record with actual speed higher than 100 (should be 80877 rows)"
    fetch: true
    postgres: 'select count(*) from (select t.name, t.age, t.license_plate, (speed_violation.data->>''date'') as date, (speed_violation.data->>''speed_limit'') as speed_limit, (speed_violation.data->>''actual_speed'') as actual_speed from (select person.data ->> ''name'' as name, person.data ->> ''age'' as age, jsonb_array_elements(person.data -> ''cars'') -> ''license_plate'' as license_plate from person) as t inner join speed_violation on license_plate = speed_violation.data -> ''license_plate'' where (speed_violation.data -> ''actual_speed'')::int > 100) as k;'
    #TODO mongo mega pomaly
    #mongo:
      #descriptionMongo: "Select names of all people who drove with speed 200"
      #collection: speed_violation
      #method: aggregate
      #filter: '[{ "$match": { "actual_speed": { "$gt": 199}}}, {"$lookup":{"from": "person", "localField": "license_plate", "foreignField": "cars.license_plate", "as": "join"}}, {"$count":"count"} ]'

      #filter: [{"$lookup":{"from": "speed_violation", "localField": "cars.license_plate", "foreignField": "license_plate", "as": "join"}}, {"$project":{"name": 1, "join.actual_speed":1}} ]
      #filte3r: [{ "$match": { "actual_speed": { "$gt": 199}}}, {"$lookup":{"from": "speed_violation", "let": { "license_plate": "$license_plate"},"pipeline": [{ "$match":{ "$expr":{ "$eq": [ "$license_plate",  "$cars.license_plate" ]}}}], "as": "join"}}, {"$project":{"actual_speed": 1, "join":1}} ]



#21- cisty select bez akychkolvek podmienok
  - id: 21
    description: "Select all from speed_violation"
    fetch: true
    postgres: 'select * from speed_violation;'
    mongo:
      collection: speed_violation
      method: find
      filter: '{ }' 

#22- count na query #21
  - id: 22
    description: "Select count of all from speed_violation"
    fetch: true
    postgres: 'select count(*) from speed_violation;'
    mongo:
      collection: speed_violation
      method: count
      filter: '{ }'

#23- jednodychy select s agregaciou array_agg
  # TODO: nic mi to nevypsalo v psql
  - id: 23
    description: "Put names of all people concatenated into an array with ARRAY_AGG"
    fetch: true
    postgres: 'SELECT ARRAY_AGG(data->''name'') from person;'
    mongo:
      collection: person
      method: aggregate
      filter: '[{"$group": { "_id": "_id", "namesArr": { "$push": "$name" }}}]'

#24- jednoduchy select na toplevel atribute
  - id: 24
    description: "Select all from person table"
    fetch: true
    postgres: 'SELECT (data->>''age'') FROM person;'
    mongo:
      collection: person
      method: find
      projection: '{"age":1, "_id":0}'
      filter: '{ }'

#25- count na query #24
  - id: 25
    description: "Count all from person table"
    fetch: true
    postgres: 'SELECT COUNT(data->>''age'') FROM person;'
    mongo:
      collection: person
      method: count
      filter: '{}'

#26- jednoduchy select  na toplevel array atribute (vysledky v poliach podla zaznamov)
  # TODO postgres pole vs. mongo contacts: [...]  je to ok?
  - id: 26
    description: "Select contacts from all people"
    fetch: true
    postgres: select (data->>'contacts') from person;
    mongo:
      collection: person
      method: find
      projection: '{"contacts":1, "_id":0}'
      filter: '{ }'

#27- count na query #26
  # TODO: Tady mi nesedi vysledek - postgres jen 50000? Podle me to pocitat jen pocet lidi
  - id: 27
    description: "Count contacts from all people"
    fetch: true
    postgres: select count(data->>'contacts') from person;
    mongo:
      collection: person
      method: aggregate
      filter: '[ {"$project": {"_id":0,"arraySize":{"$size":"$contacts"}}},{"$group": {"_id":null,"totalArraysSize":{"$sum":"$arraySize"}}}]'

#28- jednoduchy select  na toplevel array atribute (vysledky po jednom v tabulke)
  #TODO distinct or not?
  - id: 28
    description: "Select contacts from all people"
    fetch: true
    postgres: select jsonb_array_elements(data->'contacts') from person;
    mongo:
      collection: person
      method: distinct
      distinct: 'contacts'

#29- select so zanorenou podmienkou 1. sposob
  - id: 29
    description: "Select person who owns car with licence plate 1d642205-dc4e-4051-b653-bc0f6b768072"
    fetch: true
    postgres: 'select * from person where ((data -> ''cars'') @> ''[{"license_plate": "1d642205-dc4e-4051-b653-bc0f6b768072"}]'')::boolean = true;'
    mongo:
      collection: person
      method: find
      filter: '{"cars.license_plate": "1d642205-dc4e-4051-b653-bc0f6b768072"}'

#30- Agregace - prumer (v postgres aplikovany na jsonb funkciu)
# mongo shell: db.person.aggregate([{$group: {_id:null, "cars_avg": {$avg: {$size:"$cars"} } } }])
# result : {'_id': None, 'cars_avg': 2.49658} - maybe improve -> better output
  - id: 30
    description: "Get average of owned cars per person "
    fetch: true
    postgres: SELECT AVG(jsonb_array_length(data->'cars')) from person;
    mongo:
      collection: person
      method: aggregate
      filter: '[{"$group": {"_id":null, "cars_avg": {"$avg": {"$size":"$cars"} } } }]'

#31 - select so zanorenou podmienkou 2. sposob
  - id: 31
    description: "Select all records in person with licence plate 1d642205-dc4e-4051-b653-bc0f6b768072"
    fetch: true
    postgres: select * from person where data @@ '$.cars[*].license_plate == "1d642205-dc4e-4051-b653-bc0f6b768072"';
    # mongo: STEJNE JAKO 29

#32 - select s viac zanorenou podmienkou vyhladavania
  - id: 32
    description: "Select all where date on tech_exam is 18/06/2015"
    fetch: true
    postgres: 'select * from person where data @@ ''$.cars[*].tech_exams[*].date == "18/06/2015"'';'
    mongo:
      collection: person
      method: find
      filter: '{"cars.tech_exams.date": "18/06/2015"}'

#33- vlozenie jedneho zaznamu
  - id: 33
    description: "Insert one record into person"
    fetch: false
    postgres: 'INSERT INTO person (data) VALUES(''{"name":"Katherine Hewitt","age":54,"Address":{"street":"Congress Street","postcode":"486 18","city":"Twilight","state":"Pennsylvania"},"contacts":["+1 (808) 402-2645","+1 (897) 558-3084","+1 (852) 491-3646","+1 (921) 470-3415","+1 (861) 588-3466","+1 (967) 593-3615","+1 (858) 544-2339","+1 (989) 543-3403","+1 (853) 402-3725","+1 (958) 594-2307","+1 (912) 499-3326","+1 (993) 423-3343","+1 (979) 594-3001"],"cars":[],"pets":[{"name":"Weeks","species":"lion","age":14}]}'');'
    mongo:
      collection: person
      method: insert_one
      value: '{"name":"Katherine Hewitt","age":54,"Address":{"street":"Congress Street","postcode":"486 18","city":"Twilight","state":"Pennsylvania"},"contacts":["+1 (808) 402-2645","+1 (897) 558-3084","+1 (852) 491-3646","+1 (921) 470-3415","+1 (861) 588-3466","+1 (967) 593-3615","+1 (858) 544-2339","+1 (989) 543-3403","+1 (853) 402-3725","+1 (958) 594-2307","+1 (912) 499-3326","+1 (993) 423-3343","+1 (979) 594-3001"],"cars":[],"pets":[{"name":"Weeks","species":"lion","age":14}]}'

#34- update toplevel atribut
  - id: 34
    description: "Update name of person with id 12 to Meyers Parks Junior"
    fetch: false
    postgres: UPDATE person SET data = jsonb_set(data, '{name}', '"Meyers Parks Junior"', false) WHERE id = 12;
    #mongo:
      #collection: person
      #method: update
      #filter: '{ "_id": 12 }' #TODO
      #value:  '{"$set": {"name": "Meyers Parks Junior"}}'


#35- update v array
  - id: 35
    description: "Update first contact of person with id 12 to +1 (666) 471-3603 (add when non exist)"
    fetch: false
    postgres: UPDATE person SET data = jsonb_set(data, '{contacts, 0}', '"+1 (666) 471-3603"', true) WHERE id = 12;
    #mongo: TODO - pozor spravila som zmenu na prvy atribut
      #collection: person
      #method: update
      #filter: '{ "_id": 12 }'
      #value: '{"$set": {"contacts.1.content": "+1 (666) 471-3603"}}'


#36- nested update atribut v array
  - id: 36
    description: "Update name of first pet of person with id 12 to Dr. Craig"
    fetch: false
    postgres: UPDATE person SET data = jsonb_set(data, '{pets, 0, name}', '"Dr. Craig"', true) WHERE id = 12;
    # mongo: TODO

#37- more nested update of all - atribut v nested array
  - id: 37
    description: "Increment age by 1 to all pets which are older than 14 years"
    fetch: false
    postgres: 'CREATE TEMP TABLE t AS SELECT id, jsonb_array_elements(data -> ''pets'') AS pets FROM person WHERE data @@ ''$.pets[*].age > 14''; UPDATE t SET pets = jsonb_set(pets, ''{age}'', ((pets -> ''age'')::int + 1)::text::jsonb) WHERE pets @@ ''$.age > 14''; with new_pets AS (SELECT id, jsonb_agg(pets) AS pets FROM t GROUP BY(id)) UPDATE person SET data = jsonb_set(person.data, ''{pets}'', new_pets.pets) FROM person p INNER JOIN new_pets ON p.id = new_pets.id WHERE person.id = new_pets.id;'
    mongo:
      collection: person
      method: update_many
      filter: '{ "pets.age": { "$gt" : 14 } }'
      value: '{ "$inc": { "pets.$[elem].age": 1 } }'
      arrayFilters: '[ { "elem.age": { "$gt" : 14 } } ]'

#38- update toplevel atribut for multiple records
  - id: 38
    description: "Update age of person to 84 when he/she has 85"
    fetch: false
    postgres: UPDATE person SET data = jsonb_set(data, '{age}', '84', false) WHERE (data -> 'age')::int =85;
    #mongo: TODO

#39- update v array multiple records
  - id: 39
    description: "Update (add when non exist) first contact to +1 (666) 666-6666 for everyone with age 18"
    fetch: false
    postgres: UPDATE person SET data = jsonb_set(data, '{contacts, 0}', '"+1 (666) 666-6666"', true) WHERE (data -> 'age')::int = 18;
    #mongo: TODO - check 35 pls I made little change :-)

#40- nested update atribut v array multiple records
  - id: 40
    description: "Update species of pets for all from horse to pony"
    fetch: false
    postgres: UPDATE person SET data = jsonb_set(data, '{pets, 0, species}', '"pony"', true) WHERE data @@ '$.pets[*].species == "horse"';
    # mongo: TODO

#41- delete toplevel atribute -one record (complicated, need to have specific jsonb you want to "update")
  - id: 41
    description: "Delete age from record with id 12"
    fetch: false
    postgres: 'UPDATE person SET data = (SELECT jsonb ''{"age": 55, "cars": [], "name": "Meyers Parks", "pets": [{"age": 6, "name": "Craig", "species": "horse"}, {"age": 7, "name": "Eddie", "species": "mouse"}, {"age": 8, "name": "Hollie", "species": "rabbit"}, {"age": 4, "name": "Allen", "species": "rabbit"}, {"age": 14, "name": "Malone", "species": "horse"}], "Address": {"city": "Lindisfarne", "state": "Delaware", "street": "Whitney Avenue", "postcode": "946 88"}, "contacts": ["+1 (967) 471-3603", "+1 (814) 492-2778", "+1 (998) 597-3090", "+1 (811) 438-3879", "+1 (809) 453-3951", "+1 (910) 534-3344", "+1 (838) 496-3026", "+1 (997) 413-3537", "+1 (981) 551-3583", "+1 (821) 463-3727", "+1 (938) 466-2232", "+1 (952) 424-3443", "+1 (967) 447-3044", "+1 (999) 421-2239", "+1 (876) 518-2046"]}'' - ''age'' FROM person WHERE id = 12) WHERE person.id = 12;'
    # mongo: TODO

#42- delete element in array -one record (complicated, need to have specific jsonb you want to "update")
  - id: 42
    description: "Delete first contact from record with id 12"
    fetch: false
    postgres: 'UPDATE person SET data = (SELECT jsonb ''{"age": 55, "cars": [], "name": "Meyers Parks", "pets": [{"age": 6, "name": "Craig", "species": "horse"}, {"age": 7, "name": "Eddie", "species": "mouse"}, {"age": 8, "name": "Hollie", "species": "rabbit"}, {"age": 4, "name": "Allen", "species": "rabbit"}, {"age": 14, "name": "Malone", "species": "horse"}], "Address": {"city": "Lindisfarne", "state": "Delaware", "street": "Whitney Avenue", "postcode": "946 88"}, "contacts": ["+1 (967) 471-3603", "+1 (814) 492-2778", "+1 (998) 597-3090", "+1 (811) 438-3879", "+1 (809) 453-3951", "+1 (910) 534-3344", "+1 (838) 496-3026", "+1 (997) 413-3537", "+1 (981) 551-3583", "+1 (821) 463-3727", "+1 (938) 466-2232", "+1 (952) 424-3443", "+1 (967) 447-3044", "+1 (999) 421-2239", "+1 (876) 518-2046"]}'' #- ''{contacts, 0}'' FROM person WHERE id = 12) WHERE person.id = 12;'
    # mongo: TODO

#43- delete element in nested array -one record (complicated, need to have specific jsonb you want to "update")
  - id: 43
    description: "Delete age of first pet from record with id 12"
    fetch: false
    postgres: 'UPDATE person SET data = (SELECT jsonb ''{"age": 55, "cars": [], "name": "Meyers Parks", "pets": [{"age": 6, "name": "Craig", "species": "horse"}, {"age": 7, "name": "Eddie", "species": "mouse"}, {"age": 8, "name": "Hollie", "species": "rabbit"}, {"age": 4, "name": "Allen", "species": "rabbit"}, {"age": 14, "name": "Malone", "species": "horse"}], "Address": {"city": "Lindisfarne", "state": "Delaware", "street": "Whitney Avenue", "postcode": "946 88"}, "contacts": ["+1 (967) 471-3603", "+1 (814) 492-2778", "+1 (998) 597-3090", "+1 (811) 438-3879", "+1 (809) 453-3951", "+1 (910) 534-3344", "+1 (838) 496-3026", "+1 (997) 413-3537", "+1 (981) 551-3583", "+1 (821) 463-3727", "+1 (938) 466-2232", "+1 (952) 424-3443", "+1 (967) 447-3044", "+1 (999) 421-2239", "+1 (876) 518-2046"]}'' #- ''{pets, 0, age}'' FROM person WHERE id = 12) WHERE person.id = 12;'
    # mongo: TODO

#44- delete one record
  - id: 44
    description: "Delete record with id 12"
    fetch: false
    postgres: DELETE FROM person WHERE id = 12;
    # mongo: TODO

#45- delete multiple records
  - id: 45
    description: "Delete record where age is 26"
    fetch: false
    postgres: DELETE FROM person WHERE (data -> 'age')::int = 26;
    # mongo: TODO